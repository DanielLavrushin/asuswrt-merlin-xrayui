name: Manual Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '0.1'
      draft:
        description: 'Save the release as a draft first?'
        required: false
        default: false
        type: boolean

      prerelease:
        description: 'Mark this build as a pre-release?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install XRAYUI dependencies
        run: npm install

      - name: Build XRAYUI
        run: npm run build

      - name: Install WebApp dependencies
        run: |
          cd tools/webapp
          npm install

      - name: Build WebApp
        run: |
          cd tools/webapp
          npm run build

      - name: Update XRAYUI Version
        env:
          XRAYUI_VERSION: ${{ github.event.inputs.version }}
        run: |
          echo "Updating XRAYUI_VERSION to $XRAYUI_VERSION in /dist/xrayui"
          sed -i "s/^XRAYUI_VERSION=.*/XRAYUI_VERSION=\"$XRAYUI_VERSION\"/" dist/xrayui

      - name: Archive XRAYUI dist
        run: tar --transform 's|^|xrayui/|' -czf asuswrt-merlin-xrayui.tar.gz -C dist .

      - name: Archive WebApp dist
        run: |
          cd tools/webapp
          tar -czf ./../../xrayui-webapp.tar.gz -C ./dist .

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: tools/xraydatbuilder/src/go.mod

      - name: Build xraydatbuilder
        run: |
          cd tools/xraydatbuilder/src || exit 1
          chmod +x ./build.sh
          ./build.sh
          tar -czf ./../../../xrayui-datbuilder.tar.gz -C ../dist .

      - name: Read Changelog (Latest Version Only)
        id: read_changelog
        run: |
          echo "Extracting latest changelog entry..."
          CHANGELOG=$(awk '/^## \[/{if (found++) exit} found {print}' CHANGELOG.md)
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: 'Release ${{ github.event.inputs.version }}'
          draft: ${{ github.event.inputs.draft == 'true' }}
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          body: ${{ env.changelog }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: asuswrt-merlin-xrayui.tar.gz
          asset_name: asuswrt-merlin-xrayui.tar.gz
          asset_content_type: application/gzip

      - name: Upload xrayui-datbuilder Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: xrayui-datbuilder.tar.gz
          asset_name: xrayui-datbuilder.tar.gz
          asset_content_type: application/gzip

      - name: Upload xrayui-webapp Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: xrayui-webapp.tar.gz
          asset_name: xrayui-webapp.tar.gz
          asset_content_type: application/gzip
