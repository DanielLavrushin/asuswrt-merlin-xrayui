import{_ as o,a as i,b as n,c as t,d as s}from"./20250731213630-CqsoXd20.js";import{_ as a,c as r,a as c,o as l}from"./app-eTybrgsj.js";const p={};function d(h,e){return l(),r("div",null,e[0]||(e[0]=[c(`<h1 id="guide-to-subscriptions" tabindex="-1"><a class="header-anchor" href="#guide-to-subscriptions"><span>Guide to Subscriptions</span></a></h1><p>Subscription in the XRAY world is a handy way to simplify the maintenance of configuration between server and client. Once your XRAY server setup is complete, it can expose a subscription URL that any XRAY-compatible client can consume. Subscriptions are not a built-in feature of XRAY Core itself—many third-party server-side dashboards and UIs add this convenience layer.</p><p>A growing number of projects can generate subscription URLs for your server. Check the <a href="https://github.com/XTLS/Xray-core" target="_blank" rel="noopener noreferrer">XRAY Core home page</a> to find supported tools and clients.</p><h2 id="subscriptions-under-the-hood" tabindex="-1"><a class="header-anchor" href="#subscriptions-under-the-hood"><span>Subscriptions under the Hood</span></a></h2><p>There are two flavors of subscription URLs:</p><ul><li><p><strong>Subscription protocol link (a token)</strong>: Starts with a proxy protocol prefix such as <code>ss://</code>, <code>vless://</code>, <code>vmess://</code>, etc. This could be encoded to base64, so you cannot read it.</p></li><li><p><strong>Subscription source</strong>: A list of multiple proxy configurations (each on its own line, encoded).</p><div class="hint-container info"><p class="hint-container-title">Info</p><p>The only real difference is granularity: a protocol link delivers <code>one</code> proxy, while a source link delivers <code>many</code>.</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Opening either link in your browser may show “gibberish”—that’s just Base64. XRAYUI will decode it for you. If you’re curious — not required! — you can decode it yourself at <a href="https://www.base64decode.org/" target="_blank" rel="noopener noreferrer">base64decode.org</a>.</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Parsing can get tricky. If something misbehaves, swing by our <a href="https://t.me/asusxray" target="_blank" rel="noopener noreferrer">Telegram group</a> and we’ll lend a hand.</p></div></li></ul><h3 id="subscription-protocol-link" tabindex="-1"><a class="header-anchor" href="#subscription-protocol-link"><span>Subscription Protocol Link</span></a></h3><p>A single-proxy link—maybe from <code>3x-u</code>, <code>Marzban</code>, or any other <a href="https://github.com/XTLS/Xray-core" target="_blank" rel="noopener noreferrer">provider</a>. A decoded example might look like this:</p><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">vless://05519058-d2ac-4f28-9e4a-2b2a1386749e@1.1.1.1:22222?path=/telegram-channel-vlessconfig-ws&amp;security=tls&amp;encryption=none&amp;host=somedomainname.com&amp;type=ws&amp;sni=telegram-channel-vlessconfig.sohala.uk#Telegram @VlessConfig</span>
<span class="line"></span></code></pre></div><div class="hint-container info"><p class="hint-container-title">Info</p><p>The link content when opening it in the browser can be encoded, so you don&#39;t understand it. This is fine, just try to provide it.</p></div><h3 id="subscription-source-link" tabindex="-1"><a class="header-anchor" href="#subscription-source-link"><span>Subscription Source Link</span></a></h3><p>A subscription source link. Subscription source is a link that contains more than one protocol inside. Basically, it is just a list of protocols (many lines randomly containing <code>ss://</code>, <code>vless://</code>, etc.).</p><h2 id="xrayui-protocol-link" tabindex="-1"><a class="header-anchor" href="#xrayui-protocol-link"><span>XRAYUI: Protocol Link</span></a></h2><p>Let us start with a protocol link (hopefully you did not skip the important previous part, did you?).</p><p>XRAYUI is expecting you to know the protocol of the link. So first things first - we need to create an outbound protocol item first.</p><p>In the Outbounds section, select a desired protocol from the drop-down and create it. For example, you have a link</p><div class="language-text" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">https://yourserver:2096/asd7696asf98df/d0f97sd00df7s09s8df</span>
<span class="line"></span></code></pre></div><p>Insert it to the field <code>Subscription URL</code><br><img src="`+o+'" alt="subscriptions protocol"><br> All dependent on the subscription field becomes inactive. It means these fields and settings will be controlled by your subscription.</p><p>Press <code>save</code> to save the changes.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Remember: this will not apply the config changes. You still will need to press <code>apply</code> in the main form so the changes you made will be sent to the backend and saved.</p></div><p>When you apply main form changes, your changes will be applied and the page will be reloaded. You will notice a link icon next to your outbound indicating this outbound is controlled by the subscription link.<br><img src="'+i+'" alt="proxy subscription line"></p><div class="hint-container info"><p class="hint-container-title">Info</p><p>Even though the name means subscription, it is not enough just to update the remote side. To ensure the changes are taken into action, you need to press the <code>apply</code> button in the XRAYUI every time you change something in your subscription. In this case, the modified changes will be reloaded and applied by XRAYUI.</p></div><h2 id="xrayui-source-link" tabindex="-1"><a class="header-anchor" href="#xrayui-source-link"><span>XRAYUI: Source Link</span></a></h2><p>Source link is a link that contains more than one protocol inside. It will not work as a protocol link described above, but you will need to set it up differently.</p><p>Navigate to the <code>General Options</code> in the <code>Configuration Section</code> and switch to the <code>Subscriptions</code> tab.<br><img src="'+n+'" alt="source link"><br> You can save it, then the window will be reloaded. Or you can give a temporary link and press the button <code>fetch</code> below the textarea.</p><p><img src="'+t+'" alt="fetch"></p><p>The system will fetch the links from the Subscription source. Visually nothing happened. You can close the window.</p><p>However, if you create a new outbound proxy, you will get a list of available subscriptions you can pick from the list <code>Available Subscription Configuration</code><br><img src="'+s+'" alt="available subscriptions"></p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The drop-down is only available when the specific type of subscription was fetched from the URL.</p></div><p>Now you can select the subscription object from the drop-down and apply the configuration settings automatically.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>The difference between subscription source and subscription protocol is granularity. If the link contains one item - you can insert it into the Subscription URL field and this will perform an automatic reload during service restart.<br> Conversely, when it contains more than one source, it will display a drop-down list per outbound connection. This will require you to reapply the settings when changes are performed on the remote side.</p></div>',31)]))}const m=a(p,[["render",d]]),g=JSON.parse('{"path":"/en/subscriptions.html","title":"Guide to Subscriptions","lang":"en-US","frontmatter":{},"git":{"updatedTime":1753992472000,"contributors":[{"name":"Daniel Lavrushin","username":"","email":"lavrushin@gmail.com","commits":1}],"changelog":[{"hash":"765a7c9eeb483183d788f5e05031b20e1923c87a","time":1753992472000,"email":"lavrushin@gmail.com","author":"Daniel Lavrushin","message":"docs: add comprehensive guide to subscriptions in XRAYUI"}]},"filePathRelative":"en/subscriptions.md"}');export{m as comp,g as data};
