#!/bin/sh
# shellcheck disable=SC2034  # codacy:Unused variables

dnsmasq_configure() {
    local CONFIG=$1
    load_ui_response
    load_xrayui_config

    log_debug "Configuring dnsmasq..."

    log_debug "config: $CONFIG"
    log_debug "XRAY_CONFIG_FILE: $XRAY_CONFIG_FILE"
    log_debug "dnsmasq flag: $dnsmasq"

    pc_append "" "$CONFIG"
    pc_append "#$ADDON_TAG start" "$CONFIG"

    if [ "$dnsmasq" = "true" ]; then

        grep -qE '^log-queries' "$CONFIG" || pc_append "log-queries" "$CONFIG" >/dev/null && log_debug "log-queries enabled"
        grep -qE '^log-async' "$CONFIG" || pc_append "log-async=25" "$CONFIG" >/dev/null && log_debug "log-async enabled"
        grep -qE '^log-facility' "$CONFIG" || pc_append "log-facility=/opt/var/log/dnsmasq.log" "$CONFIG" >/dev/null && log_debug "log-facility enabled"
    fi

    if jq -e '
       .inbounds[]
        | select(.protocol == "dokodemo-door")
        | select((.listen // "127.0.0.1") != "0.0.0.0")
        | "\(.listen // "127.0.0.1")#\(.port)"
  ' "$XRAY_CONFIG_FILE" >/dev/null; then
        log_debug "dnsmasq: found inbound DNS server"
        jq -r '
       .inbounds[]
        | select(.protocol == "dokodemo-door")
        | select((.listen // "127.0.0.1") != "0.0.0.0")
        | "\(.listen // "127.0.0.1")#\(.port)"
  ' "$XRAY_CONFIG_FILE" |
            while IFS= read -r srv; do
                pc_append "server=$srv" "$CONFIG" && log_debug "dnsmasq: added inbound DNS server=$srv"
            done
    fi

    dnsmasq_xray_ipsec_freedom $CONFIG

    pc_append "#$ADDON_TAG end" "$CONFIG"

    log_debug "dnsmasq configured"
}

dnsmasq_xray_ipsec_freedom() {
    CONFIG="$1"

    local DNSMASQ_DIR="$ADDON_SHARE_DIR/dnsmasq"
    local DIRECT_CONF="$DNSMASQ_DIR/direct.conf"
    local TMP="$DIRECT_CONF.tmp.$$"

    local V2DAT="/opt/share/xrayui/v2dat"
    local GEOSITE="/opt/sbin/geosite.dat"
    local GEOIP="/opt/sbin/geoip.dat"

    local ipsec="${ipsec:-false}"

    mkdir -p "$DNSMASQ_DIR" 2>/dev/null || return 1

    exec 3>"$TMP"
    printf '# Autogenerated by %s on %s\n' \
        "$ADDON_TAG" "$(date '+%Y-%m-%d %H:%M:%S')" >&3

    if [ "$ipsec" = "true" ]; then

        jq -r '
      [ .outbounds[] | select(.protocol=="freedom") | .tag ] as $free
      | .routing.rules[]
      | select( (.outboundTag as $tag
                 | $free | index($tag)) )
      | (.domain // [])
      | (if type=="array" then .[] else . end)
    ' "$XRAY_CONFIG_FILE" | sort -u |
            while IFS= read -r entry; do

                case "$entry" in
                domain:*) dnsmasq_domain_to_ipset "${entry#domain:}" ;;
                .*) dnsmasq_domain_to_ipset "${entry#.}" ;;

                geosite:*)
                    tag=${entry#geosite:}
                    "$V2DAT" unpack geosite -o - -f "$tag" "$GEOSITE" |
                        while IFS= read -r g; do
                            case "$g" in
                            keyword:* | regexp:* | full:*) ;;
                            *)
                                dnsmasq_domain_to_ipset "$g"
                                ;;
                            esac
                        done
                    ;;

                regex:* | geoip:* | ext:*) : ;;
                *.*)
                    dnsmasq_domain_to_ipset "$entry"
                    ;;
                esac
            done
    fi

    exec 3>&- # close FD 3
    chmod 644 "$TMP"
    mv -f "$TMP" "$DIRECT_CONF"

    grep -qF "conf-file=$DIRECT_CONF" "$CONFIG" ||
        pc_append "conf-file=$DIRECT_CONF" "$CONFIG"
}

dnsmasq_domain_to_ipset() {
    local d="$1"
    log_debug "dnsmasq: FREEDOM domain $d"
    if is_ipv6_enabled; then
        printf 'ipset=/%s/%s,%s\n' "$d" \
            "$IPSEC_BYPASS_V4" "$IPSEC_BYPASS_V6" >&3
    else
        printf 'ipset=/%s/%s\n' "$d" "$IPSEC_BYPASS_V4" >&3
    fi
}
