#!/bin/sh

source /usr/sbin/helper.sh

readonly SCRIPT_NAME="xrayui"

ENABLED=yes
PROCS=xray
ARGS="run -config /opt/etc/xray/config.json"
PREARGS=""
DESC="Xray Core UI"
PATH=/opt/bin:/opt/sbin:/sbin:/bin:/usr/sbin:/usr/bin

PIDFILE=/var/run/xray.pid

xray_addons_asp_page=/jffs/addons/xray-ui/xray-ui.asp

xray_config="/opt/etc/xray/config.json"
dir_xrayui="/www/user/xray-ui"
xray_ui_config="$dir_xrayui/xray-config.json"

XRAY="xray"

start() {
    logger "xrayui" "Starting $DESC"
    xray $ARGS >/dev/null 2>&1 &
    echo $! >$PIDFILE
}

stop() {
    logger "xrayui" "Stopping $DESC"
    killall xray
}

restart() {
    logger "xrayui" "Restarting $DESC"
    stop
    start
}

mount_ui() {
    nvram get rc_support | grep -q am_addons
    if [ $? != 0 ]; then
        echo "This firmware does not support addons!"
        exit 5
    fi

    am_get_webui_page $xray_addons_asp_page

    if [ "$am_webui_page" = "none" ]; then
        echo "Unable to install XRAYUI"
        exit 5
    fi

    echo "Mounting XRAYUI as $am_webui_page"

    cp $xray_addons_asp_page /www/user/$am_webui_page

    if [ ! -f /tmp/menuTree.js ]; then
        cp /www/require/modules/menuTree.js /tmp/
        mount -o bind /tmp/menuTree.js /www/require/modules/menuTree.js
    fi

    sed -i "/url: \"Advanced_GRE_Content.asp\", tabName:/a {url: \"$am_webui_page\", tabName: \"X-RAY\"}," /tmp/menuTree.js

    umount /www/require/modules/menuTree.js && mount -o bind /tmp/menuTree.js /www/require/modules/menuTree.js

    am_settings_set xray_ui_page $am_webui_page
    xray_ui_page=$(am_settings_get xray_ui_page)

    refresh_xray_config

    cp /jffs/addons/xray-ui/app.js /www/user/xray-ui/app.js

    echo "XRAYUI mounted successfully as $xray_ui_page"
}

unmount_ui() {
    nvram get rc_support | grep -q am_addons
    if [ $? != 0 ]; then
        echo "This firmware does not support addons!"
        exit 5
    fi

    xray_ui_page=$(am_settings_get xray_ui_page)

    if [ -z "$xray_ui_page" ]; then
        echo "No XRAYUI page found to unmount."
        exit 5
    fi

    echo "Unmounting XRAYUI $xray_ui_page"
    rm -fr /www/user/$xray_ui_page

    if [ ! -f /tmp/menuTree.js ]; then
        echo "menuTree.js not found, skipping unmount"
        exit 5
    fi

    echo "Removing XRAYUI entry from menuTree.js"
    sed -i "\\~$xray_ui_page~d" /tmp/menuTree.js

    umount /www/require/modules/menuTree.js && mount -o bind /tmp/menuTree.js /www/require/modules/menuTree.js

    rm -rf /www/user/xray-ui

    echo "XRAYUI $xray_ui_page unmounted successfully"
}

remount_ui() {
    unmount_ui
    mount_ui
}

refresh_xray_config() {
    xray_ui_page=$(am_settings_get xray_ui_page)

    if [ ! -d $dir_xrayui ]; then
        mkdir -p "$dir_xrayui"
    fi

    if [ -f "$xray_config" ]; then
        sed 's/\/\/.*//' "$xray_config" >"$xray_ui_config"
    else
        exit 1
    fi
}

make_clean_config() {
    local tempconfig="/tmp/xray-config-clean.json"
    sed 's/\/\/.*//' "$xray_config" >$tempconfig
    echo $tempconfig
}

client_delete() {
    local tempconfig=$(make_clean_config)
    local payload=$(am_settings_get xray_payload)

    if [ -z "$payload" ]; then
        logger "xrayui" "Payload is empty. Cannot add client."
        rm -f "$tempconfig"
        return 1
    fi

    local email id level
    email=$(echo "$payload" | jq -r '.email')
    id=$(echo "$payload" | jq -r '.id')

    logger "xrayui" "Removing client from Xray $xray_config: email=$email, id=$id"

    jq --arg email "$email" --arg id "$id" '
    .inbounds[].settings.clients |= map(select(.email != $email or .id != $id))
    ' $tempconfig >"/tmp/xray-config.json" && mv /tmp/xray-config.json "$xray_config"

    if [ $? -eq 0 ]; then
        logger "xrayui" "Client $email with id $id removed successfully."
        refresh_xray_config
    else
        logger "xrayui" "Failed to remove client $email with id $id."
    fi
    rm -f $tempconfig
    refresh_xray_config

    am_settings_del xray_payload
}

client_add() {
    local tempconfig=$(make_clean_config)
    local payload=$(am_settings_get xray_payload)

    if [ -z "$payload" ]; then
        logger "xrayui" "Payload is empty. Cannot add client."
        rm -f "$tempconfig"
        return 1
    fi

    local email id level
    email=$(echo "$payload" | jq -r '.email')
    id=$(echo "$payload" | jq -r '.id')

    logger "xrayui" "Adding new client to Xray $xray_config: email=$email, id=$id, level=0"

    jq --arg email "$email" --arg id "$id" '
    .inbounds[].settings.clients += [{
        "email": $email,
        "id": $id,
        "level": 0
    }]
    ' $tempconfig >"/tmp/xray-config.json" && mv /tmp/xray-config.json "$xray_config"

    if [ $? -eq 0 ]; then
        logger "xrayui" "Client $email added successfully."
        refresh_xray_config
    else
        logger "xrayui" "Failed to add client $email."
    fi
    rm -f $tempconfig

    refresh_xray_config

    am_settings_del xray_payload
}

am_settings_del() {

    local key="$1"
    logger "xrayui" "Deleting $key from custom settings."
    sed -i "/$key/d" /jffs/addons/custom_settings.txt
}

get_connected_clients() {

    temp_file="/tmp/xray_clients_online.json"
    >$temp_file

    ips=$(netstat -an | grep ':4433' | grep 'ESTABLISHED' | awk -F'[: ]+' '{print $8}' | sed 's/::ffff://' | sort | uniq)

    for ip in $ips; do
        if [ -n "$ip" ]; then
            emails=$(grep "$ip" /tmp/xray_access.log | awk -F'email: ' '{print $2}' | sort | uniq | sed 's/^/"/; s/$/"/' | tr '\n' ',' | sed 's/,$//')

            if [ -n "$emails" ]; then
                echo "{\"ip\": \"$ip\", \"email\": [$emails]}," >>$temp_file
            else
                echo "{\"ip\": \"$ip\", \"email\": []}," >>$temp_file
            fi
        fi
    done

    if [ -s "$temp_file" ]; then
        json_array="[$(sed '$ s/,$//' $temp_file)]"
    else
        json_array="[]"
    fi

    echo "$json_array" >$dir_xrayui/clients-online.json
    rm -f $temp_file
    echo "$json_array"
}

cert_renew() {
    local cert_dir="/opt/etc/xray/cert"
    local cert_file="$cert_dir/xray-cert.pem"
    local key_file="$cert_dir/xray-key.pem"
    local tempconfig=$(make_clean_config)

    if [ ! -d "$cert_dir" ]; then
        logger "xrayui" "Directory $cert_dir does not exist. Creating it."
        mkdir -p "$cert_dir"
        if [ $? -ne 0 ]; then
            logger "xrayui" "Failed to create directory $cert_dir."
            return 1
        fi
    fi

    logger "xrayui" "Generating self-signed certificate for Xray in $cert_dir..."

    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout "$key_file" \
        -out "$cert_file" \
        -subj "/CN=xray/O=Local Xray/C=US"

    if [ $? -eq 0 ]; then
        logger "xrayui" "Certificate and key successfully generated:"
        logger "xrayui" "Certificate: $cert_file"
        logger "xrayui" "Private Key: $key_file"
    else
        logger "xrayui" "Failed to generate certificate."
        return 1
    fi

    jq --arg cert_file "$cert_file" --arg key_file "$key_file" '
    .inbounds[] |= (
        if has("streamSettings") then
            .streamSettings.tlsSettings.certificates = [
                {
                    certificateFile: $cert_file,
                    keyFile: $key_file
                }
            ]
        else
            .streamSettings |= {
                network: "tcp",
                security: "tls",
                tlsSettings: {
                    certificates: [
                        {
                            certificateFile: $cert_file,
                            keyFile: $key_file
                        }
                    ]
                }
            }
        end
    )
    ' "$tempconfig" >"/tmp/xray-config.json"

    if [ $? -eq 0 ]; then
        mv "/tmp/xray-config.json" "$xray_config"
        logger "xrayui" "TLS certificates updated in Xray config successfully."
    else
        logger "xrayui" "Failed to update TLS certificates in Xray config."
        rm -f "/tmp/xray-config.json"
        return 1
    fi

    restart
    if [ $? -eq 0 ]; then
        logger "xrayui" "Xray service restarted successfully."
    else
        logger "xrayui" "Failed to restart Xray service."
        return 1
    fi

    refresh_xray_config
    if [ $? -eq 0 ]; then
        logger "xrayui" "Xray UI configuration refreshed successfully."
    else
        logger "xrayui" "Failed to refresh Xray UI configuration."
        return 1
    fi
}

regenerate_reality_keys() {
    logger "xrayui" "Regenerating Reality private and public keys..."

    xray_output=$($XRAY x25519)
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to run xray x25519."
        return 1
    fi

    private_key=$(echo "$xray_output" | grep 'Private key:' | awk -F'Private key: ' '{print $2}')
    public_key=$(echo "$xray_output" | grep 'Public key:' | awk -F'Public key: ' '{print $2}')

    if [ -z "$private_key" ] || [ -z "$public_key" ]; then
        logger "xrayui" "Failed to extract Reality keys from xray x25519 output."
        return 1
    fi

    logger "xrayui" "Generated Reality Private Key: $private_key"
    logger "xrayui" "Generated Reality Public Key: $public_key"

    reality_json="/www/user/xray-ui/reality.json"

    if [ ! -d "/www/user/xray-ui" ]; then
        logger "xrayui" "Directory /www/user/xray-ui does not exist. Creating it."
        mkdir -p "/www/user/xray-ui"
        if [ $? -ne 0 ]; then
            logger "xrayui" "Failed to create directory /www/user/xray-ui."
            return 1
        fi
    fi

    echo "{
  \"privateKey\": \"$private_key\",
  \"publicKey\": \"$public_key\"
}" >"$reality_json"

    if [ $? -eq 0 ]; then
        logger "xrayui" "Saved Reality keys to $reality_json successfully."
    else
        logger "xrayui" "Failed to save Reality keys to $reality_json."
        return 1
    fi

    chmod 600 "$reality_json"

    return 0
}

switch_mode() {
    mode=$(am_settings_get xray_payload)
    am_settings_del xray_payload

    mode_type=$(echo "$mode" | jq -r '.mode')
    logger "xrayui" "Switching Xray mode to $mode_type"

    am_settings_set xray_mode $mode_type
}

save_server_config() {
    local temp_config="/tmp/xray_server_config_new.json"
    local backup_config="/opt/etc/xray/config.json.bak"

    local incoming_config
    incoming_config=$(am_settings_get xray_payload)
    am_settings_del xray_payload

    if [ -z "$incoming_config" ]; then
        logger "xrayui" "No new server configuration provided."
        exit 1
    fi

    echo "$incoming_config" >"$temp_config"
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to write incoming configuration to $temp_config."
        exit 1
    fi

    jq empty "$temp_config" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        logger "xrayui" "Invalid JSON format in incoming server configuration."
        rm -f "$temp_config"
        exit 1
    fi

    cp "$xray_config" "$backup_config"
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to backup existing configuration to $backup_config."
        rm -f "$temp_config"
        exit 1
    fi
    logger "xrayui" "Existing configuration backed up to $backup_config."

    cp "$temp_config" "$xray_config"
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to apply new configuration to $xray_config."
        cp "$backup_config" "$xray_config"
        if [ $? -ne 0 ]; then
            logger "xrayui" "Critical: Failed to restore configuration from backup."
        fi
        rm -f "$temp_config"
        exit 1
    fi
    logger "xrayui" "New server configuration applied successfully."

    rm -f "$temp_config"

    restart
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to restart Xray service after applying new configuration."
        cp "$backup_config" "$xray_config"
        restart
        exit 1
    fi
    logger "xrayui" "Xray service restarted successfully with the new configuration."

    refresh_xray_config
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to refresh Xray UI configuration."
        exit 1
    fi
    logger "xrayui" "Xray UI configuration refreshed successfully."

    rm -f "$backup_config"
    logger "xrayui" "Backup configuration $backup_config removed."
    am_settings_del xray_server_config
    exit 0
}

case "$1" in
start)
    start
    ;;
stop)
    stop
    ;;
restart)
    restart
    ;;
mount_ui)
    mount_ui
    ;;
unmount_ui)
    unmount_ui
    ;;
remount_ui)
    remount_ui
    ;;
service_event)
    if [ "$2" = "refreshconfig" ]; then
        refresh_xray_config
        exit 0
    elif [ "$2" = "connectedclients" ]; then
        get_connected_clients
        exit 0
    elif [ "$2" = "configuration" ]; then
        case "$3" in
        "server")
            save_server_config
            exit 0
            ;;
        "mode")
            switch_mode
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "certificate" ]; then
        case "$3" in
        "renew")
            cert_renew
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "regenerate" ]; then
        logger "xrayui" "REGENERATE!!!!"
        case "$3" in
        "realitykeys")
            regenerate_reality_keys
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "client" ]; then
        case "$3" in
        "add")
            client_add
            exit 0
            ;;
        "delete")
            client_delete
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "serverstatus" ]; then
        case "$3" in
        "start")
            start
            exit 0
            ;;
        "restart")
            restart
            exit 0
            ;;
        "stop")
            stop
            exit 0
            ;;
        *)
            exit 1
            ;;
        esac
    fi
    exit 0
    ;;
*)
    echo "Usage: $0 {start|stop|restart|mount_ui|unmount_ui|remount_ui}"
    exit 1
    ;;
esac

exit 0
