#!/bin/sh

export PATH=/opt/bin:/opt/sbin:/sbin:/bin:/usr/sbin:/usr/bin
source /usr/sbin/helper.sh

readonly SCRIPT_NAME="xrayui"

ENABLED=yes
PROCS=xray
ARGS="run -config /opt/etc/xray/config.json"
PREARGS=""
DESC="Xray Core UI"
PATH=/opt/bin:/opt/sbin:/sbin:/bin:/usr/sbin:/usr/bin

PIDFILE=/var/run/xray.pid

xray_addons_asp_page=/jffs/addons/xrayui/index.asp

xray_config="/opt/etc/xray/config.json"
xray_config_client="/opt/etc/xray/config-client.json"
dir_xrayui="/www/user/xrayui"
xray_ui_config="$dir_xrayui/xray-config.json"

XRAY="xray"
XRAYUI_VERSION="1.0"
# Color Codes
CERR='\033[0;31m'
CSUC='\033[0;32m'
CWARN='\033[0;33m'
CINFO='\033[0;36m'
CRESET='\033[0m'

start() {
    mode=$(am_settings_get xray_mode)
    if [ -z "$mode" ]; then
        logger "xrayui" "No mode found in custom settings. Defaulting to server mode."
        mode="server"
        am_settings_set xray_mode $mode
    fi

    logger "xrayui" "Starting Xray in $mode mode"
    echo "$CINFO Starting Xray in $mode mode$CRESET"

    ARGS=" -c $xray_config"
    if [ "$mode" = "server" ]; then
        configure_firewall_server
    elif [ "$mode" = "client" ]; then
        configure_firewall_client
    else
        mode="server"
        am_settings_set xray_mode $mode
        configure_firewall_server
    fi

    test_xray_config

    logger "xrayui" "Starting $DESC with $ARGS"
    xray $ARGS >/dev/null 2>&1 &
    echo $! >$PIDFILE
}

stop() {
    logger "xrayui" "Stopping $DESC"
    killall xray
    cleanup_firewall_client
}

restart() {
    logger "xrayui" "Restarting $DESC"
    stop
    start
}

configure_firewall_server() {

    XRAY_PORT="$(jq -r '.inbounds[0].port' $xray_config)"

    iptables -I INPUT -p tcp --dport "$XRAY_PORT" -j ACCEPT
    iptables -I FORWARD -p tcp --dport "$XRAY_PORT" -j ACCEPT

    logger "xrayui" "Xray firewall rules applied successfully."

}

configure_firewall_client() {
    logger "xrayui" "Configuring Xray firewall rules..."

    XRAY_PORT="$(jq -r '.inbounds[0].port' $xray_config)"

    cleanup_firewall_client

    # Create XRAY chain in NAT
    iptables -t nat -N XRAY 2>/dev/null

    # Exclude local & LAN
    iptables -t nat -A XRAY -d 127.0.0.1/32 -j RETURN
    iptables -t nat -A XRAY -d 192.168.0.0/16 -j RETURN

    iptables -t nat -A XRAY -p tcp -j REDIRECT --to-port "$XRAY_PORT"
    iptables -t nat -A XRAY -p udp -j REDIRECT --to-port "$XRAY_PORT"

    ip rule add fwmark 0x8777 table 8777 priority 100
    ip route add local 0.0.0.0/0 dev lo table 8777

    # Hook XRAY chain to PREROUTING
    iptables -t nat -A PREROUTING -j XRAY

    logger "xrayui" "Xray NAT rules for TCP applied successfully"
}

cleanup_firewall_client() {
    logger "xrayui" "Cleaning up Xray firewall rules..."

    RULES="$(ip rule show | grep -E 'fwmark .* lookup 8777')"
    if [ -n "$RULES" ]; then
        echo "$RULES" | while read LINE; do
            PRIO=$(echo "$LINE" | cut -d':' -f1 | awk '{print $1}')
            MARK=$(echo "$LINE" | awk '{print $5}')
            ip rule del fwmark "$MARK" table 8777 priority "$PRIO" 2>/dev/null
            logger "xrayui" "Removed rule: fwmark $MARK lookup 8777 priority $PRIO"
        done
    fi

    # Remove fwmark rules and routing table
    ip rule del fwmark 0x8777 table 8777 priority 100 2>/dev/null
    ip route flush table 8777 2>/dev/null
    logger "xrayui" "Removed fwmark rule and flushed table 8777"

    # Remove XRAY chain in NAT
    iptables -t nat -D PREROUTING -j XRAY 2>/dev/null
    iptables -t nat -F XRAY 2>/dev/null
    iptables -t nat -X XRAY 2>/dev/null
    logger "xrayui" "Removed XRAY NAT chain"

    # Remove XRAY chain in MANGLE (if used)
    iptables -t mangle -D PREROUTING -j XRAY 2>/dev/null
    iptables -t mangle -F XRAY 2>/dev/null
    iptables -t mangle -X XRAY 2>/dev/null
    logger "xrayui" "Removed XRAY MANGLE chain"

    service firewall_restart
    service wan_restart

    logger "xrayui" "Restored DNS redirection to system default"

    logger "xrayui" "Xray disabled and network configuration rolled back"
}

mount_ui() {
    nvram get rc_support | grep -q am_addons
    if [ $? != 0 ]; then
        echo -e "${CERR}This firmware does not support addons!${CRESET}"
        exit 5
    fi

    am_get_webui_page $xray_addons_asp_page

    if [ "$am_webui_page" = "none" ]; then
        echo "${CERR}Unable to install XRAYUI${CRESET}"
        exit 5
    fi

    echo -e "${CINFO}Mounting XRAYUI as $am_webui_page${CRESET}"

    cp $xray_addons_asp_page /www/user/$am_webui_page

    if [ ! -f /tmp/menuTree.js ]; then
        cp /www/require/modules/menuTree.js /tmp/
        mount -o bind /tmp/menuTree.js /www/require/modules/menuTree.js
    fi

    sed -i "/url: \"Advanced_GRE_Content.asp\", tabName:/a {url: \"$am_webui_page\", tabName: \"X-RAY\"}," /tmp/menuTree.js

    umount /www/require/modules/menuTree.js && mount -o bind /tmp/menuTree.js /www/require/modules/menuTree.js

    am_settings_set xray_page $am_webui_page
    xray_ui_page=$(am_settings_get xray_page)

    refresh_xray_config

    cp /jffs/addons/xrayui/app.js /www/user/xrayui/app.js

    echo -e "${CSUC}XRAYUI mounted successfully as $xray_ui_page${CRESET}"
}

unmount_ui() {
    nvram get rc_support | grep -q am_addons
    if [ $? != 0 ]; then
        echo -e "${CERR}This firmware does not support addons!${CRESET}"
        exit 5
    fi

    xray_ui_page=$(am_settings_get xray_page)

    if [ -z "$xray_ui_page" ]; then
        echo -e "${CWARN}No XRAYUI page found to unmount. Continuing to clean up...${CRESET}"
    else
        echo -e "${CINFO}Unmounting XRAYUI $xray_ui_page${CRESET}"
        rm -fr /www/user/$xray_ui_page
    fi

    if [ ! -f /tmp/menuTree.js ]; then
        echo -e "${CINFO}menuTree.js not found, skipping unmount.${CRESET}"
    else
        echo -e "${CWARN}Removing any X-RAY menu entry from menuTree.js.${CRESET}"
        # Safely remove entries with tabName: "X-RAY"
        grep -v "tabName: \"X-RAY\"" /tmp/menuTree.js >/tmp/menuTree_temp.js
        mv /tmp/menuTree_temp.js /tmp/menuTree.js

        umount /www/require/modules/menuTree.js
        mount -o bind /tmp/menuTree.js /www/require/modules/menuTree.js
    fi

    rm -rf $dir_xrayui

    echo -e "${CSUC}Cleanup completed.${CRESET}"
}

remount_ui() {
    echo -e "${CINFO}Remounting XRAYUI...${CRESET}"
    unmount_ui
    mount_ui
}

refresh_xray_config() {
    xray_ui_page=$(am_settings_get xray_page)

    if [ ! -d $dir_xrayui ]; then
        mkdir -p "$dir_xrayui"
    fi

    # Process the xray_config file
    if [ -f "$xray_config" ]; then
        sed -E '/^\s*\/\/.*$/d; /^\s*\/\*/,/\*\//d' "$xray_config" | jq '.' >"$xray_ui_config"
        if [ $? -ne 0 ]; then
            echo "Error processing $xray_config"
            return 1
        fi
    else
        echo "Error: $xray_config not found."
    fi

}

make_clean_config() {
    local tempconfig="/tmp/xray-config-clean.json"
    sed 's/\/\/.*//' "$xray_config" >$tempconfig
    echo $tempconfig
}

am_settings_del() {

    local key="$1"
    logger "xrayui" "Deleting $key from custom settings."
    sed -i "/$key/d" /jffs/addons/custom_settings.txt
}

get_connected_clients() {

    temp_file="/tmp/xray_clients_online.json"
    >$temp_file

    ips=$(netstat -an | grep ':4433' | grep 'ESTABLISHED' | awk -F'[: ]+' '{print $8}' | sed 's/::ffff://' | sort | uniq)

    for ip in $ips; do
        if [ -n "$ip" ]; then
            emails=$(grep "$ip" /tmp/xray_access.log | awk -F'email: ' '{print $2}' | sort | uniq | sed 's/^/"/; s/$/"/' | tr '\n' ',' | sed 's/,$//')

            if [ -n "$emails" ]; then
                echo "{\"ip\": \"$ip\", \"email\": [$emails]}," >>$temp_file
            else
                echo "{\"ip\": \"$ip\", \"email\": []}," >>$temp_file
            fi
        fi
    done

    if [ -s "$temp_file" ]; then
        json_array="[$(sed '$ s/,$//' $temp_file)]"
    else
        json_array="[]"
    fi

    echo "$json_array" >$dir_xrayui/clients-online.json
    rm -f $temp_file
    echo "$json_array"
}

cert_renew() {
    local cert_dir="/opt/etc/xray/cert"
    local cert_file="$cert_dir/xray-cert.pem"
    local key_file="$cert_dir/xray-key.pem"
    local tempconfig=$(make_clean_config)

    if [ ! -d "$cert_dir" ]; then
        logger "xrayui" "Directory $cert_dir does not exist. Creating it."
        mkdir -p "$cert_dir"
        if [ $? -ne 0 ]; then
            logger "xrayui" "Failed to create directory $cert_dir."
            return 1
        fi
    fi

    logger "xrayui" "Generating self-signed certificate for Xray in $cert_dir..."

    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout "$key_file" \
        -out "$cert_file" \
        -subj "/CN=xray/O=Local Xray/C=US"

    if [ $? -eq 0 ]; then
        logger "xrayui" "Certificate and key successfully generated:"
        logger "xrayui" "Certificate: $cert_file"
        logger "xrayui" "Private Key: $key_file"
    else
        logger "xrayui" "Failed to generate certificate."
        return 1
    fi

    jq --arg cert_file "$cert_file" --arg key_file "$key_file" '
            .inbounds[]?.streamSettings?.tlsSettings.certificates |=
                if . != null then
                if any(.[]?; .usage == "encipherment") then
                    map(
                    if .usage == "encipherment" then
                        .certificateFile = $cert_file |
                        .keyFile = $key_file
                    else
                        .
                    end
                    )
                elif length == 0 then
                    [
                    {
                        certificateFile: $cert_file,
                        keyFile: $key_file
                    }
                    ]
                else
                    . + [{
                    certificateFile: $cert_file,
                    keyFile: $key_file
                    }]
                end
                else
                [
                    {
                    certificateFile: $cert_file,
                    keyFile: $key_file
                    }
                ]
                end
' "$xray_config" >"/tmp/xray-config.json"

    if [ $? -eq 0 ]; then
        mv "/tmp/xray-config.json" "$xray_config"
        logger "xrayui" "TLS certificates updated in Xray config successfully."
    else
        logger "xrayui" "Failed to update TLS certificates in Xray config."
        rm -f "/tmp/xray-config.json"
        return 1
    fi

    restart
    if [ $? -eq 0 ]; then
        logger "xrayui" "Xray service restarted successfully."
    else
        logger "xrayui" "Failed to restart Xray service."
        return 1
    fi

    refresh_xray_config
    if [ $? -eq 0 ]; then
        logger "xrayui" "Xray UI configuration refreshed successfully."
    else
        logger "xrayui" "Failed to refresh Xray UI configuration."
        return 1
    fi
}

regenerate_reality_keys() {
    logger "xrayui" "Regenerating Reality private and public keys..."

    xray_output=$($XRAY x25519)
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to run xray x25519."
        return 1
    fi

    private_key=$(echo "$xray_output" | grep 'Private key:' | awk -F'Private key: ' '{print $2}')
    public_key=$(echo "$xray_output" | grep 'Public key:' | awk -F'Public key: ' '{print $2}')

    if [ -z "$private_key" ] || [ -z "$public_key" ]; then
        logger "xrayui" "Failed to extract Reality keys from xray x25519 output."
        return 1
    fi

    logger "xrayui" "Generated Reality Private Key: $private_key"
    logger "xrayui" "Generated Reality Public Key: $public_key"

    reality_json="$dir_xrayui/reality.json"

    if [ ! -d $dir_xrayui ]; then
        logger "xrayui" "Directory $dir_xrayui does not exist. Creating it."
        mkdir -p $dir_xrayui
        if [ $? -ne 0 ]; then
            logger "xrayui" "Failed to create directory $dir_xrayui."
            return 1
        fi
    fi

    echo "{
  \"privateKey\": \"$private_key\",
  \"publicKey\": \"$public_key\"
}" >"$reality_json"

    if [ $? -eq 0 ]; then
        logger "xrayui" "Saved Reality keys to $reality_json successfully."
    else
        logger "xrayui" "Failed to save Reality keys to $reality_json."
        return 1
    fi

    chmod 600 "$reality_json"

    return 0
}

regenerate_wireguard_keys() {
    local private_key=$(reconstruct_payload)
    local public_key
    local json_file="$dir_xrayui/xray-ui-response.json"

    if [ -z "$private_key" ]; then
        private_key=$(wg genkey)
        if [ $? -ne 0 ]; then
            logger "xrayui" "Error: Failed to generate private key."
            return 1
        fi
    fi

    public_key=$(echo "$private_key" | wg pubkey)
    if [ $? -ne 0 ]; then
        logger "xrayui" "Error: Failed to generate public key from private key."
        return 1
    fi

    local json_content
    if [ -f "$json_file" ]; then
        json_content=$(cat "$json_file")
    else
        json_content="{}"
    fi

    json_content=$(echo "$json_content" | jq --arg pk "$private_key" --arg pub "$public_key" \
        '.wireguard.privatekey = $pk | .wireguard.publickey = $pub')

    if [ $? -ne 0 ]; then
        logger "xrayui" "Error: Failed to update JSON content."
        return 1
    fi

    echo "$json_content" >"$json_file"

    if [ $? -ne 0 ]; then
        logger "xrayui" "Error: Failed to write to JSON file."
        return 1
    fi

    return 0
}

switch_mode() {
    mode=$(reconstruct_payload)

    mode_type=$(echo "$mode" | jq -r '.mode')
    logger "xrayui" "Switching Xray mode to $mode_type"

    am_settings_set xray_mode $mode_type
}

save_server_config() {
    local temp_config="/tmp/xray_server_config_new.json"
    local backup_config="/opt/etc/xray/config.json.bak"

    local incoming_config=$(reconstruct_payload)

    if [ -z "$incoming_config" ]; then
        logger "xrayui" "No new server configuration provided."
        exit 1
    fi

    echo "$incoming_config" >"$temp_config"
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to write incoming configuration to $temp_config."
        exit 1
    fi

    jq empty "$temp_config" >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        logger "xrayui" "Invalid JSON format in incoming server configuration."
        rm -f "$temp_config"
        exit 1
    fi

    cp "$xray_config" "$backup_config"
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to backup existing configuration to $backup_config."
        rm -f "$temp_config"
        exit 1
    fi
    logger "xrayui" "Existing configuration backed up to $backup_config."

    cp "$temp_config" "$xray_config"
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to apply new configuration to $xray_config."
        cp "$backup_config" "$xray_config"
        if [ $? -ne 0 ]; then
            logger "xrayui" "Critical: Failed to restore configuration from backup."
        fi
        rm -f "$temp_config"
        exit 1
    fi
    logger "xrayui" "New server configuration applied successfully."

    rm -f "$temp_config"

    restart
    if [ $? -ne 0 ]; then
        logger "xrayui" "Failed to restart Xray service after applying new configuration."
        cp "$backup_config" "$xray_config"
        restart
        exit 1
    fi
    logger "xrayui" "Xray service restarted successfully with the new configuration."

    refresh_xray_config
    rm -f "$backup_config"
    exit 0
}

reconstruct_payload() {
    local idx=0
    local chunk
    local payload=""
    while :; do
        chunk=$(am_settings_get xray_payload$idx)
        if [ -z "$chunk" ]; then
            break
        fi
        payload="$payload$chunk"
        am_settings_del xray_payload$idx
        idx=$((idx + 1))
    done
    echo "$payload"
}

test_xray_config() {
    local output
    if ! output=$(xray -c /opt/etc/xray/config.json -test 2>&1); then
        message=$(echo "$output" | sed 's/"/\\"/g')
    else
        message="success"
    fi

    local json_file="$dir_xrayui/xray-ui-response.json"
    if [ ! -f "$json_file" ]; then
        echo '{"xray":{}}' >"$json_file"
    fi

    local updated_json=$(jq --arg msg "$message" '.xray.test = $msg' "$json_file")
    echo "$updated_json" >"$json_file"
}

install() {
    echo -e "${CINFO}Starting XRAY UI installation process.${CRESET}"

    # Check for Entware
    echo
    if [ ! -x /opt/bin/opkg ]; then
        echo -e "${CERR}Entware is not installed or opkg binary is not accessible.${CRESET}"
        echo -e "${CERR}Please install Entware first: https://github.com/Entware/Entware/wiki/Install-on-ASUSWRT${CRESET}"
        exit 1
    fi
    echo -e "${CSUC}Entware is installed.${CRESET}"

    # Check for jq
    echo
    if ! opkg list-installed | grep -q '^jq$'; then
        echo -e "${CWARN}jq is not installed. Installing jq...${CRESET}"
        opkg update
        if opkg install jq; then
            echo -e "${CSUC}jq installed successfully.${CRESET}"
        else
            echo -e "${CERR}Failed to install jq.${CRESET}"
            exit 1
        fi
    else
        echo -e "${CINFO}jq is already installed.${CRESET}"
    fi

    # Check for iptables
    echo
    if ! type iptables >/dev/null 2>&1; then
        echo -e "${CERR}iptables is not available on this system. It is required for firewall configuration.${CRESET}"
        exit 1
    fi

    echo -e "${CSUC}iptables is available.${CRESET}"

    # Install Xray via opkg
    echo
    if ! opkg list-installed | grep -q '^xray$'; then
        echo -e "${CWARN}Installing Xray from the Entware repository...${CRESET}"
        opkg update
        if opkg install xray; then
            echo -e "${CSUC}Xray installed successfully.${CRESET}"
        else
            echo -e "${CERR}Failed to install Xray.${CRESET}"
            exit 1
        fi
    else
        echo -e "${CINFO}Xray is already installed.${CRESET}"
    fi

    # Validate base configuration
    echo
    if [ ! -f /opt/etc/xray/config.json ]; then
        echo -e "${CWARN}Base configuration file not found. Creating a default config...${CRESET}"
        mkdir -p /opt/etc/xray
        cat >/opt/etc/xray/config.json <<EOF
{
    "log": {
        "loglevel": "warning",
        "access": "/tmp/xray_access.log",
        "error": "/tmp/xray_error.log"
    },
    "inbounds":[],
    "outbounds":[],
    "routing": {
        "rules": []
    },
    "dns": {
        "servers": []
    }
}
EOF
        if [ $? -eq 0 ]; then
            echo -e "${CSUC}Default configuration created successfully.${CRESET}"
        else
            echo -e "${CERR}Failed to create default configuration.${CRESET}"
            exit 1
        fi
    else
        echo -e "${CINFO}Base configuration file already exists.${CRESET}"
    fi

    # Add or update nat-start
    echo
    echo -e "${CINFO}Ensuring /jffs/scripts/nat-start contains required entry.${CRESET}"
    mkdir -p /jffs/scripts
    if [ ! -f /jffs/scripts/nat-start ]; then
        echo "#!/bin/sh" >/jffs/scripts/nat-start
        chmod +x /jffs/scripts/nat-start
    else
        echo -e "${CWARN}Removing existing #xrayui entries from /jffs/scripts/nat-start.${CRESET}"
        sed -i '/#xrayui/d' /jffs/scripts/nat-start
    fi
    echo "/jffs/scripts/xrayui service_event firewall server #xrayui" >>/jffs/scripts/nat-start
    echo "/jffs/scripts/xrayui service_event firewall client #xrayui" >>/jffs/scripts/nat-start
    echo -e "${CSUC}Updated /jffs/scripts/nat-start with XrayUI entry.${CRESET}"

    # Add or update service-event
    echo
    echo -e "${CINFO}Ensuring /jffs/scripts/service-event contains required entry.${CRESET}"
    if [ ! -f /jffs/scripts/service-event ]; then
        echo "#!/bin/sh" >/jffs/scripts/service-event
        chmod +x /jffs/scripts/service-event
    else
        echo -e "${CWARN}Removing existing #xrayui entries from /jffs/scripts/service-event.${CRESET}"
        sed -i '/#xrayui/d' /jffs/scripts/service-event
    fi
    echo "echo \"\$2\" | grep -q \"^xrayui\" && /jffs/scripts/xrayui service_event \$(echo \"\$2\" | cut -d'_' -f2- | tr '_' ' ') & #xrayui" >>/jffs/scripts/service-event
    echo -e "${CSUC}Updated /jffs/scripts/service-event with XrayUI entry.${CRESET}"

    echo
    remount_ui

    echo
    echo -e "${CSUC}Installation process completed successfully.${CRESET}"

    am_settings_set xray_version $XRAYUI_VERSION
    am_settings_set xray_mode "server"

}

uninstall() {
    echo -e "${CINFO}Starting XRAY UI uninstallation process.${CRESET}"

    # Stop XRAY service if running
    if [ -f $PIDFILE ]; then
        echo -e "${CWARN}Stopping XRAY service...${CRESET}"
        stop
        rm -f $PIDFILE
        echo -e "${CSUC}XRAY service stopped.${CRESET}"
    else
        echo -e "${CINFO}XRAY service is not running.${CRESET}"
    fi

    # Remove XRAY UI files
    echo -e "${CWARN}Removing XRAY UI files...${CRESET}"
    rm -rf /www/user/xrayui /jffs/addons/xrayui /tmp/xray_clients_online.json

    if [ $? -eq 0 ]; then
        echo -e "${CSUC}XRAY UI files removed successfully.${CRESET}"
    else
        echo -e "${CERR}Failed to remove XRAY UI files.${CRESET}"
        exit 1
    fi

    # clean up nat-start
    echo
    echo -e "${CWARN}Removing existing #xrayui entries from /jffs/scripts/nat-start.${CRESET}"
    sed -i '/#xrayui/d' /jffs/scripts/nat-start

    # clean up service-event
    echo -e "${CWARN}Removing existing #xrayui entries from /jffs/scripts/service-event.${CRESET}"
    sed -i '/#xrayui/d' /jffs/scripts/service-event

    # Unmount UI
    echo
    echo -e "${CWARN}Unmounting XRAY UI...${CRESET}"
    unmount_ui
    if [ $? -eq 0 ]; then
        echo -e "${CSUC}XRAY UI unmounted successfully.${CRESET}"
    else
        echo -e "${CERR}Failed to unmount XRAY UI.${CRESET}"
        exit 1
    fi

    # Remove XRAY custom settings
    echo -e "${CWARN}Removing XRAY custom settings...${CRESET}"

    am_settings_del xray_version
    am_settings_del xray_mode
    am_settings_del xray_page

    echo -e "${CSUC}Custom settings removed successfully.${CRESET}"

    echo -e "${CINFO}XRAY UI uninstallation completed.${CRESET}"

    # Ask user if they want to remove XRAY (opkg) and its configs
    echo -e "${CWARN}Do you want to remove XRAY (installed via opkg) and its configurations? (yes/no)${CRESET}"
    read -r user_input

    if [ "$user_input" = "yes" ]; then
        # Remove XRAY from Entware if installed
        if opkg list-installed | grep -q '^xray$'; then
            echo -e "${CWARN}Removing XRAY from Entware...${CRESET}"
            if opkg remove xray; then
                echo -e "${CSUC}XRAY removed successfully.${CRESET}"
            else
                echo -e "${CERR}Failed to remove XRAY.${CRESET}"
                exit 1
            fi
        else
            echo -e "${CINFO}XRAY is not installed.${CRESET}"
        fi

        # Remove XRAY configuration files
        echo -e "${CWARN}Removing XRAY configuration files...${CRESET}"
        rm -rf /opt/etc/xray
        if [ $? -eq 0 ]; then
            echo -e "${CSUC}XRAY configuration files removed successfully.${CRESET}"
        else
            echo -e "${CERR}Failed to remove XRAY configuration files.${CRESET}"
            exit 1
        fi
    else
        echo -e "${CINFO}Keeping XRAY and its configuration files.${CRESET}"
    fi

    echo -e "${CSUC}Uninstallation process completed successfully.${CRESET}"
}

enable_config_logs() {

    local temp_file="/tmp/xray_config.json"

    echo -e "${CINFO}Checking for the 'log' section in the Xray configuration.${CRESET}"

    # Check if the config file exists
    if [ ! -f "$xray_config" ]; then
        echo -e "${CERR}Configuration file not found: $xray_config${CRESET}"
        return 1
    fi

    # Check if the 'log' section is missing
    if ! jq -e '.log' "$xray_config" >/dev/null 2>&1; then
        echo -e "${CWARN}'log' section is missing. Adding it to the configuration.${CRESET}"

        # Add the 'log' section
        jq '. + {
            "log": {
                "loglevel": "warning",
                "error": "/tmp/xray_error.log",
                "access": "/tmp/xray_access.log"
            }
        }' "$xray_config" >"$temp_file"

        if [ $? -eq 0 ]; then
            mv "$temp_file" "$xray_config"
            echo -e "${CSUC}'log' section added successfully.${CRESET}"
        else
            echo -e "${CERR}Failed to update the configuration with 'log' section.${CRESET}"
            rm -f "$temp_file"
            return 1
        fi
    else
        echo -e "${CINFO}'log' section already exists in the configuration.${CRESET}"
    fi

    restart

    return 0
}

case "$1" in
install)
    install
    ;;
uninstall)
    uninstall
    ;;
start)
    start
    ;;
stop)
    stop
    ;;
restart)
    restart
    ;;
mount_ui)
    mount_ui
    ;;
unmount_ui)
    unmount_ui
    ;;
remount_ui)
    remount_ui
    ;;
service_event)
    if [ "$2" = "refreshconfig" ]; then
        refresh_xray_config
        exit 0
    elif [ "$2" = "testconfig" ]; then
        test_xray_config
        exit 0
    elif [ "$2" = "connectedclients" ]; then
        get_connected_clients
        exit 0
    elif [ "$2" = "configuration" ]; then
        case "$3" in
        "server")
            save_server_config
            exit 0
            ;;
        "client")
            save_client_config
            exit 0
            ;;
        "mode")
            switch_mode
            exit 0
            ;;
        "logs")
            enable_config_logs
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "certificate" ]; then
        case "$3" in
        "renew")
            cert_renew
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "regenerate" ]; then
        case "$3" in
        "realitykeys")
            regenerate_reality_keys
            exit 0
            ;;
        "wgkeys")
            regenerate_wireguard_keys
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "client" ]; then
        case "$3" in
        "add")
            client_add
            exit 0
            ;;
        "delete")
            client_delete
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "firewall" ]; then
        case "$3" in
        "client")
            configure_firewall_client
            exit 0
            ;;
        "client_cleanup")
            cleanup_firewall_client
            exit 0
            ;;
        "server")
            configure_firewall_server
            exit 0
            ;;
        esac
        exit 0
    elif [ "$2" = "serverstatus" ]; then
        case "$3" in
        "start")
            start
            exit 0
            ;;
        "restart")
            restart
            exit 0
            ;;
        "stop")
            stop
            exit 0
            ;;
        *)
            exit 1
            ;;
        esac
    fi
    exit 0
    ;;
*)
    echo "Usage: $0 {install|uninstall|start|stop|restart|mount_ui|unmount_ui|remount_ui}"
    exit 1
    ;;
esac

exit 0
